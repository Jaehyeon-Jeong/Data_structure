#include <iostream>
#include <vector>

const unsigned long long MOD = 1000003;

unsigned long long ways(unsigned long long n);

std::vector<std::vector<unsigned long long>> multiply(
    const std::vector<std::vector<unsigned long long>>& A,
    const std::vector<std::vector<unsigned long long>>& B);

std::vector<std::vector<unsigned long long>> matrixPower(
    const std::vector<std::vector<unsigned long long>>& mat,
    unsigned long long n);

unsigned long long ways(unsigned long long n) {
  if (n <= 2) {
    return 1;
  }

  std::vector<std::vector<unsigned long long>> transition_matrix = {
      {1, 1, 1, 1, 1},
      {1, 0, 0, 0, 0},
      {0, 1, 0, 0, 0},
      {0, 0, 1, 0, 0},
      {0, 0, 0, 1, 0}};

  std::vector<std::vector<unsigned long long>> result_matrix =
      matrixPower(transition_matrix, n - 2);

  return (result_matrix[0][0] + result_matrix[0][1]) % MOD;
}

std::vector<std::vector<unsigned long long>> multiply(
    const std::vector<std::vector<unsigned long long>>& A,
    const std::vector<std::vector<unsigned long long>>& B) {
  int n = 5;
  int m = 5;
  int p = 5;

  std::vector<std::vector<unsigned long long>> result(
      n, std::vector<unsigned long long>(p, 0));

  for (int i = 0; i < n; ++i) {
    for (int j = 0; j < p; ++j) {
      for (int k = 0; k < m; ++k) {
        result[i][j] = result[i][j] + (A[i][k] * B[k][j]) % MOD;
        result[i][j] = result[i][j] % MOD;
      }
    }
  }

  return result;
}

std::vector<std::vector<unsigned long long>> matrixPower(
    const std::vector<std::vector<unsigned long long>>& mat,
    unsigned long long n) {
  if (n <= 1) {
    return mat;
  }

  std::vector<std::vector<unsigned long long>> result = matrixPower(mat, n / 2);
  result = multiply(result, result);

  if (n % 2 == 1) {
    result = multiply(result, mat);
  }

  return result;
}

int main() {
  unsigned long long n;
  std::cin >> n;
  std::cout << ways(n) << std::endl;
  return 0;
}

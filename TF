#include <iostream>

template <typename T>
class Sorter {
 private:
  void swap(T& a, T& b) {
    T temp = a;
    a = b;
    b = temp;
  }

 public:
  void insertionSort(T* arr, int low, int high) {
    for (int i = low + 1; i <= high; i++) {
      T key = arr[i];
      int j = i - 1;
      while (j >= low && arr[j] > key) {
        arr[j + 1] = arr[j];
        j--;
      }
      arr[j + 1] = key;
    }
  }

  int partition(T* arr, int low, int high) {
    T pivot = arr[(low + high) / 2];
    int i = low;
    int j = high;

    while (i <= j) {
      while (arr[i] < pivot) {
        i++;
      }
      while (arr[j] > pivot) {
        j--;
      }
      if (i >= j) {
        break;
      }
      swap(arr[i], arr[j]);
      i++;
      j--;
    }
    return j;
  }

  void quickSort(T* arr, int low, int high) {
    while (low < high) {
      if (high - low + 1 < 256) {
        insertionSort(arr, low, high);
        return;
      } else {
        int pi = partition(arr, low, high);

        if (low < high) {
          quickSort(arr, low, pi);
          low = pi + 1;
        } else {
          quickSort(arr, pi + 1, high);
          high = pi - 1;
        }
      }
    }
  }
};

void printArray(const int* arr, int size) {
  for (int i = 0; i < size; i++) {
    std::cout << arr[i] << "\n";
  }
}

int main() {
  int N;
  std::cin >> N;
  if (N <= 0) {
    return 0;
  }

  int* arr = new int[N];
  for (int i = 0; i < N; i++) {
    std::cin >> arr[i];
  }

  Sorter<int> sorter;
  sorter.quickSort(arr, 0, N - 1);

  printArray(arr, N);
  std::cout << "\n";

  delete[] arr;

  return 0;
}

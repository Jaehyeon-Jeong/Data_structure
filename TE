#include <iostream>
#include <vector>

void generateSequence(std::vector<long long>& A, int n, long long A0,
                      long long A1) {
  A.resize(n);
  A[0] = A0;
  A[1] = A1;

  for (int i = 2; i < n; i++) {
    A[i] = (A[i - 1] * 123 + A[i - 2] * 45) % (10000000 + 4321);
  }
}

size_t partition(std::vector<long long>& A, size_t low, size_t high) {
  long long pivot = A[high];
  size_t i = low - 1;

  for (size_t j = low; j < high; j++) {
    if (A[j] <= pivot) {
      i++;
      std::swap(A[i], A[j]);
    }
  }

  std::swap(A[i + 1], A[high]);
  return i + 1;
}

long long findKOrderStat(std::vector<long long>& A, int k) {
  size_t low = 0;
  size_t high = A.size() - 1;

  while (low < high) {
    size_t pivotIndex = partition(A, low, high);

    if (pivotIndex == static_cast<size_t>(k)) {
      return A[pivotIndex];
    } else if (pivotIndex < static_cast<size_t>(k)) {
      low = pivotIndex + 1;
    } else {
      high = pivotIndex - 1;
    }
  }

  return A[low];
}

int main() {
  int n, k;
  long long A0, A1;

  std::cin >> n;

  std::cin >> k;

  std::cin >> A0;

  std::cin >> A1;

  std::vector<long long> A;
  generateSequence(A, n, A0, A1);

  long long kOrderStat = findKOrderStat(A, k - 1);

  std::cout << kOrderStat << "\n";

  return 0;
}

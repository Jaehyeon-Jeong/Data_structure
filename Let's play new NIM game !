#include <iostream>
#include <vector>

const int max_s = 101;
const int max_heap = 10001;

int cal_grundy(const std::vector<int>& S, std::vector<int>& grundy, int x) {
  if (grundy[x] != -1) {
    return grundy[x];
  }

  std::vector<bool> reachable(max_heap, false);

  for (int s : S) {
    if (x - s >= 0) {
      reachable[cal_grundy(S, grundy, x - s)] = true;
    }
  }

  int mex = 0;
  while (reachable[mex]) {
    mex++;
  }

  return grundy[x] = mex;
}

char l_or_w(const std::vector<int>& S, const std::vector<int>& heaps,
            const std::vector<int>& grundy) {
  int all_grundy = 0;
  for (int heap : heaps) {
    all_grundy ^= grundy[heap];
  }
  return all_grundy == 0 ? 'L' : 'W';
}

int main() {
  int k;
  std::cin >> k;
  std::vector<int> S(k);
  for (int i = 0; i < k; ++i) {
    std::cin >> S[i];
  }

  std::vector<int> grundy(max_heap, -1);

  for (int i = 0; i < max_heap; ++i) {
    cal_grundy(S, grundy, i);
  }

  int q;
  std::cin >> q;
  for (int i = 0; i < q; ++i) {
    int j;
    std::cin >> j;
    std::vector<int> heaps(j);
    for (int l = 0; l < j; ++l) {
      std::cin >> heaps[l];
    }
    std::cout << l_or_w(S, heaps, grundy);
  }

  return 0;
}

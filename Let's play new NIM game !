#include <iostream>
#include <vector>

class Nim {
 public:
  Nim(const std::vector<int>& S, int max_heap) : S(S), max_heap(max_heap) {
    grundy.resize(max_heap, -1);
    for (int i = 0; i < max_heap; ++i) {
      cal_grundy(i);
    }
  }

  char res(const std::vector<int>& heaps) {
    int all_grundy = 0;
    for (int heap : heaps) {
      all_grundy ^= grundy[heap];
    }
    return all_grundy == 0 ? 'L' : 'W';
  }

 private:
  std::vector<int> S;
  int max_heap;
  std::vector<int> grundy;

  int cal_grundy(int x) {
    if (grundy[x] != -1) {
      return grundy[x];
    }

    std::vector<bool> reachable(max_heap, false);

    for (int s : S) {
      if (x - s >= 0) {
        reachable[cal_grundy(x - s)] = true;
      }
    }

    int mex = 0;
    while (reachable[mex]) {
      mex++;
    }

    return grundy[x] = mex;
  }
};

int main() {
  int k;
  std::cin >> k;
  std::vector<int> S(k);
  for (int i = 0; i < k; ++i) {
    std::cin >> S[i];
  }

  const int max_heap = 10001;
  Nim game(S, max_heap);

  int q;
  std::cin >> q;
  for (int i = 0; i < q; ++i) {
    int j;
    std::cin >> j;
    std::vector<int> heaps(j);
    for (int l = 0; l < j; ++l) {
      std::cin >> heaps[l];
    }
    std::cout << game.res(heaps);
  }

  return 0;
}

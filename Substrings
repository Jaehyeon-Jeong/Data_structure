#include <algorithm>
#include <iostream>
#include <string>
#include <vector>

struct Suffix {
  int index;
  int rank[2];
};

bool comparator(Suffix a, Suffix b) {
  return (a.rank[0] == b.rank[0]) ? (a.rank[1] < b.rank[1])
                                  : (a.rank[0] < b.rank[0]);
}

std::vector<int> build_sa(const std::string& s) {
  int n = s.size();
  std::vector<Suffix> suffixes(n);

  for (int i = 0; i < n; ++i) {
    suffixes[i].index = i;
    suffixes[i].rank[0] = s[i] - 'a';
    suffixes[i].rank[1] = (i + 1 < n) ? (s[i + 1] - 'a') : -1;
  }

  std::sort(suffixes.begin(), suffixes.end(), comparator);

  std::vector<int> ind(n);
  for (int k = 4; k < 2 * n; k *= 2) {
    int rank = 0;
    int prev_rank = suffixes[0].rank[0];
    suffixes[0].rank[0] = rank;
    ind[suffixes[0].index] = 0;

    for (int i = 1; i < n; ++i) {
      if (suffixes[i].rank[0] == prev_rank &&
          suffixes[i].rank[1] == suffixes[i - 1].rank[1]) {
        prev_rank = suffixes[i].rank[0];
        suffixes[i].rank[0] = rank;
      } else {
        prev_rank = suffixes[i].rank[0];
        suffixes[i].rank[0] = ++rank;
      }
      ind[suffixes[i].index] = i;
    }

    for (int i = 0; i < n; ++i) {
      int nextindex = suffixes[i].index + k / 2;
      suffixes[i].rank[1] =
          (nextindex < n) ? suffixes[ind[nextindex]].rank[0] : -1;
    }

    std::sort(suffixes.begin(), suffixes.end(), comparator);
  }

  std::vector<int> sa(n);
  for (int i = 0; i < n; ++i) {
    sa[i] = suffixes[i].index;
  }

  return sa;
}

std::vector<int> build_cp(const std::string& s, const std::vector<int>& sa) {
  int n = s.size();
  std::vector<int> lcp(n, 0);
  std::vector<int> invSuff(n, 0);

  for (int i = 0; i < n; ++i) {
    invSuff[sa[i]] = i;
  }

  int k = 0;

  for (int i = 0; i < n; ++i) {
    if (invSuff[i] == n - 1) {
      k = 0;
      continue;
    }

    int j = sa[invSuff[i] + 1];

    while (i + k < n && j + k < n && s[i + k] == s[j + k]) {
      ++k;
    }

    lcp[invSuff[i]] = k;

    if (k > 0) {
      --k;
    }
  }

  return lcp;
}

long long counting(const std::string& s) {
  int n = s.size();
  std::vector<int> sa = build_sa(s);
  std::vector<int> lcp = build_cp(s, sa);

  long long dist_sub = n - sa[0];
  for (int i = 1; i < n; ++i) {
    dist_sub += (n - sa[i]) - lcp[i - 1];
  }

  return dist_sub;
}

int main() {
  std::string input;
  std::cin >> input;

  long long result = counting(input);
  std::cout << result << std::endl;

  return 0;
}

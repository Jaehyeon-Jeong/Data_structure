#include <algorithm>
#include <iostream>
#include <queue>
#include <vector>

struct Edge {
  int a, b;
};

void Edgeconnect(std::vector<std::vector<int>>& adj,
                 std::vector<int>& in_degree, int a, int b) {
  adj[a].push_back(b);
  in_degree[b]++;
}

std::vector<int> Topsort(int n, std::vector<std::vector<int>>& adj,
                         std::vector<int>& in_degree) {
  std::vector<int> result;
  std::vector<int> q;

  for (int i = 0; i < n; i++) {
    if (in_degree[i] == 0) {
      q.push_back(i);
    }
  }

  while (!q.empty()) {
    int v = q.back();
    q.pop_back();
    result.push_back(v);

    for (int u : adj[v]) {
      if (--in_degree[u] == 0) {
        q.push_back(u);
      }
    }
  }
  if (static_cast<int>(result.size()) != n) {
    return {};
  }

  return result;
}

int main() {
  int n, m;
  std::cin >> n >> m;

  std::vector<std::vector<int>> adj(n);
  std::vector<int> in_degree(n, 0);

  for (int i = 0; i < m; i++) {
    int a, b;
    std::cin >> a >> b;
    if (a < 0 || a > n || b < 0 || b > n) {
      return 0;
    }
    Edgeconnect(adj, in_degree, a, b);
  }
  std::vector<int> result = Topsort(n, adj, in_degree);

  if (!result.empty()) {
    std::cout << "YES" << std::endl;
    for (int v : result) {
      std::cout << v << " ";
    }
    std::cout << std::endl;
  } else {
    std::cout << "NO" << std::endl;
  }

  return 0;
}

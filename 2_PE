#include <iostream>
#include <queue>
#include <vector>

class Graph {
 public:
  explicit Graph(int vertices);
  void AddEdge(int a, int b);
  virtual std::vector<int> TopologicalSort() = 0;

 protected:
  int vertices_;
  std::vector<std::vector<int>> adjList_;
  std::vector<int> inDegree_;
};

class TopologicalSorter : public Graph {
 public:
  using Graph::Graph;
  std::vector<int> TopologicalSort() override;
};

Graph::Graph(int vertices)
    : vertices_(vertices), adjList_(vertices), inDegree_(vertices, 0) {}

void Graph::AddEdge(int a, int b) {
  adjList_[a].push_back(b);
  inDegree_[b]++;
}

std::vector<int> TopologicalSorter::TopologicalSort() {
  std::vector<int> result;
  std::vector<int> q;

  for (int i = 0; i < vertices_; i++) {
    if (inDegree_[i] == 0) {
      q.push_back(i);
    }
  }

  while (!q.empty()) {
    int v = q.back();
    q.pop_back();
    result.push_back(v);

    for (int u : adjList_[v]) {
      if (--inDegree_[u] == 0) {
        q.push_back(u);
      }
    }
  }

  if (static_cast<int>(result.size()) != vertices_) {
    return {};
  }

  return result;
}

int main() {
  int n, m;
  std::cin >> n >> m;

  TopologicalSorter graph(n);

  for (int i = 0; i < m; i++) {
    int a, b;
    std::cin >> a >> b;
    if (!(0 <= a && a < n) || !(0 <= b && b < n)) {
      return 0;
    }
    graph.AddEdge(a, b);
  }

  std::vector<int> result = graph.TopologicalSort();

  if (!result.empty()) {
    std::cout << "YES" << std::endl;
    for (int v : result) {
      std::cout << v << " ";
    }
    std::cout << std::endl;
  } else {
    std::cout << "NO" << std::endl;
  }

  return 0;
}
